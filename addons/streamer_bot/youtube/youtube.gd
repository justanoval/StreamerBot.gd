extends Node

signal broadcast_started(payload: Dictionary)
signal broadcast_ended(payload: Dictionary)
signal message(payload: Dictionary)
signal message_deleted(payload: Dictionary)
signal user_banned(payload: Dictionary)
signal super_chat(payload: Dictionary)
signal super_sticker(payload: Dictionary)
signal new_sponsor(payload: Dictionary)
signal member_mile_stone(payload: Dictionary)
signal new_sponsor_only_started(payload: Dictionary)
signal new_sponsor_only_ended(payload: Dictionary)
signal statistics_updated(payload: Dictionary)
signal broadcast_updated(payload: Dictionary)
signal membership_gift(payload: Dictionary)
signal gift_membership_received(payload: Dictionary)
signal first_words(payload: Dictionary)
signal present_viewers(payload: Dictionary)
signal new_subscriber(payload: Dictionary)
signal broadcast_monitoring_started(payload: Dictionary)
signal broadcast_monitoring_ended(payload: Dictionary)
signal broadcast_added(payload: Dictionary)
signal broadcast_removed(payload: Dictionary)
signal seven_tvemote_added(payload: Dictionary)
signal seven_tvemote_removed(payload: Dictionary)
signal better_ttvemote_added(payload: Dictionary)
signal better_ttvemote_removed(payload: Dictionary)
signal poll_closed(payload: Dictionary)

func _ready() -> void:
	StreamerBot.connected.connect(_on_streamer_bot_connected)

func _on_streamer_bot_connected() -> void:
	print("YouTube connected!")
	StreamerBot.subscribe({"youtube": ["BroadcastStarted"]}, func(payload): broadcast_started.emit(payload))
	StreamerBot.subscribe({"youtube": ["BroadcastEnded"]}, func(payload): broadcast_ended.emit(payload))
	StreamerBot.subscribe({"youtube": ["Message"]}, func(payload): message.emit(payload))
	StreamerBot.subscribe({"youtube": ["MessageDeleted"]}, func(payload): message_deleted.emit(payload))
	StreamerBot.subscribe({"youtube": ["UserBanned"]}, func(payload): user_banned.emit(payload))
	StreamerBot.subscribe({"youtube": ["SuperChat"]}, func(payload): super_chat.emit(payload))
	StreamerBot.subscribe({"youtube": ["SuperSticker"]}, func(payload): super_sticker.emit(payload))
	StreamerBot.subscribe({"youtube": ["NewSponsor"]}, func(payload): new_sponsor.emit(payload))
	StreamerBot.subscribe({"youtube": ["MemberMileStone"]}, func(payload): member_mile_stone.emit(payload))
	StreamerBot.subscribe({"youtube": ["NewSponsorOnlyStarted"]}, func(payload): new_sponsor_only_started.emit(payload))
	StreamerBot.subscribe({"youtube": ["NewSponsorOnlyEnded"]}, func(payload): new_sponsor_only_ended.emit(payload))
	StreamerBot.subscribe({"youtube": ["StatisticsUpdated"]}, func(payload): statistics_updated.emit(payload))
	StreamerBot.subscribe({"youtube": ["BroadcastUpdated"]}, func(payload): broadcast_updated.emit(payload))
	StreamerBot.subscribe({"youtube": ["MembershipGift"]}, func(payload): membership_gift.emit(payload))
	StreamerBot.subscribe({"youtube": ["GiftMembershipReceived"]}, func(payload): gift_membership_received.emit(payload))
	StreamerBot.subscribe({"youtube": ["FirstWords"]}, func(payload): first_words.emit(payload))
	StreamerBot.subscribe({"youtube": ["PresentViewers"]}, func(payload): present_viewers.emit(payload))
	StreamerBot.subscribe({"youtube": ["NewSubscriber"]}, func(payload): new_subscriber.emit(payload))
	StreamerBot.subscribe({"youtube": ["BroadcastMonitoringStarted"]}, func(payload): broadcast_monitoring_started.emit(payload))
	StreamerBot.subscribe({"youtube": ["BroadcastMonitoringEnded"]}, func(payload): broadcast_monitoring_ended.emit(payload))
	StreamerBot.subscribe({"youtube": ["BroadcastAdded"]}, func(payload): broadcast_added.emit(payload))
	StreamerBot.subscribe({"youtube": ["BroadcastRemoved"]}, func(payload): broadcast_removed.emit(payload))
	StreamerBot.subscribe({"youtube": ["SevenTVEmoteAdded"]}, func(payload): seven_tvemote_added.emit(payload))
	StreamerBot.subscribe({"youtube": ["SevenTVEmoteRemoved"]}, func(payload): seven_tvemote_removed.emit(payload))
	StreamerBot.subscribe({"youtube": ["BetterTTVEmoteAdded"]}, func(payload): better_ttvemote_added.emit(payload))
	StreamerBot.subscribe({"youtube": ["BetterTTVEmoteRemoved"]}, func(payload): better_ttvemote_removed.emit(payload))
	StreamerBot.subscribe({"youtube": ["PollClosed"]}, func(payload): poll_closed.emit(payload))
